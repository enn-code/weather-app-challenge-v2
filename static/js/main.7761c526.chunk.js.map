{"version":3,"sources":["Actions/ActionTypes.js","Reducers/Root.reducer.js","Reducers/InitialState.js","Styles/DesignVariables.js","Styles/CommonComponents.js","Components/WeatherComponents.js","Containers/Weather.js","Actions/WeatherActions.js","Config/config.js","Views/Home.js","App.js","serviceWorker.js","index.js"],"names":["Constants","UPDATE_DATA","LOADING_DATA","UPDATE_SEARCH","UPDATE_SEARCH_PRETTY","RootReducer","combineReducers","weatherData","state","arguments","length","undefined","action","type","Object","objectSpread","weather","data","isLoading","search","searchTerm","isRenderPrettyTable","initialState","list","clouds","all","dt","dt_txt","main","temp","temp_min","temp_max","pressure","sea_level","rain","3h","sys","pod","description","wind","speed","deg","CommonVariables","primaryBgColourLight","primaryBgColourDark","primaryFontColour","primaryFontColourDark","primaryButtonColour","secondaryBgColourLight","secondaryBgColourDark","styled","div","_templateObject","StyledLogo","span","_templateObject2","StyledButton","button","_templateObject3","props","selected","StyledTableBody","tbody","WeatherComponents_templateObject","StyledTable","table","WeatherComponents_templateObject2","RenderBasicList","item","react_default","a","createElement","Math","round","RenderBasicTable","items","map","i","RenderBasicCells","key","RenderPrettyTable","Paper_default","Table_default","TableHead_default","TableRow_default","TableCell_default","TableBody_default","numeric","StyledWeatherContainer","Weather_templateObject","StyledWeatherControls","Weather_templateObject2","StyledLocation","Weather_templateObject3","Weather","toggleDataCall","params","toggleRenderPretty","isPretty","_this","updatePrettyPreference","generateWeatherDataList","renderTable","this","fetchWeatherData","console","log","_this2","_this$props","dataError","displayId","onClick","Component","connect","dispatch","x","fetch","concat","then","response","json","myJson","StyledContainer","Home_templateObject","DesignVariables","StyledLogoContainer","Home_templateObject2","Home","Containers_Weather","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","InitialState","App","react_redux_es","Views_Home","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7761c526.chunk.js","sourcesContent":["const Constants = {\n  UPDATE_DATA: 'UPDATE_DATA',\n  LOADING_DATA: 'LOADING_DATA',\n  UPDATE_SEARCH: 'UPDATE_SEARCH',\n  UPDATE_SEARCH_PRETTY: 'UPDATE_SEARCH_PRETTY',\n};\n\nexport default Constants;\n","import { combineReducers } from 'redux';\nimport Constants from '../Actions/ActionTypes';\n\nconst search = (state = { searchTerm: 'London', isRenderPrettyTable: false }, action) => {\n  switch (action.type) {\n    case Constants.UPDATE_SEARCH:\n      return {\n        ...state,\n        searchTerm: action.searchTerm,\n      };\n    case Constants.UPDATE_SEARCH_PRETTY:\n      return {\n        ...state,\n        isRenderPrettyTable: action.isRenderPrettyTable,\n      };\n    default:\n      return state;\n  }\n};\n\nconst weatherData = (state = {}, action) => {\n  switch (action.type) {\n    case Constants.UPDATE_DATA:\n      return {\n        ...state,\n        weather: action.data,\n        isLoading: action.isLoading,\n      };\n    case Constants.LOADING_DATA:\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n    default:\n      return state;\n  }\n};\n\nconst RootReducer = combineReducers({\n  weatherData,\n  search,\n});\n\nexport default RootReducer;\n","const initialState = {\n  search: {\n    searchTerm: 'London',\n  },\n  weatherData: {\n    isLoading: false,\n    weather: {\n      list: [{\n        clouds: { all: 76 },\n        dt: 1539313200,\n        dt_txt: '2018-10-12 03:00:00',\n        main: {\n          temp: 287.75, temp_min: 287.75, temp_max: 288.149, pressure: 1014.78, sea_level: 1022.3,\n        },\n        rain: { '3h': 0.05 },\n        sys: { pod: 'n' },\n        weather: [{ description: 'cloudy' }],\n        wind: { speed: 6.61, deg: 198.501 },\n      }, {\n        clouds: { all: 64 },\n        dt: 1539324000,\n        dt_txt: '2018-10-12 06:00:00',\n        main: {\n          temp: 288.03, temp_min: 288.03, temp_max: 288.327, pressure: 1014.98, sea_level: 1022.56,\n        },\n        rain: {},\n        sys: { pod: 'n' },\n        weather: [{ description: 'rainy' }],\n        wind: { speed: 7.36, deg: 188 },\n      }, {\n        clouds: { all: 100 },\n        dt: 1539334800,\n        dt_txt: '2018-10-12 09:00:00',\n        main: {\n          temp: 288.82, temp_min: 288.82, temp_max: 289.022, pressure: 1015.65, sea_level: 1023.1,\n        },\n        rain: { '3h': 0.935 },\n        sys: { pod: 'd' },\n        weather: [{ description: 'clear' }],\n        wind: { speed: 7.83, deg: 188.001 },\n      }],\n    },\n  },\n};\n\nexport default initialState;\n","const CommonVariables = {\n  primaryBgColourLight: '#32afb7',\n  primaryBgColourDark: '#198e9c',\n  primaryFontColour: '#fff',\n  primaryFontColourDark: '#363636',\n  primaryButtonColour: '#2ca6ae',\n  secondaryBgColourLight: '#04a7fc',\n  secondaryBgColourDark: '#0342a6',\n};\n\nexport default CommonVariables;\n","import styled from 'styled-components';\nimport CommonVariables from './DesignVariables';\n\nexport const StyledPanel = styled.div`\n  background-color: rgba(255,255,255,.15);\n  box-shadow: 0 4px 7px 0 rgba(0,0,0,0.2);\n  padding: 0 30px 45px;\n  margin-bottom: 30px;\n`;\n\nexport const StyledLogo = styled.span`\n  display: inline-block;\n  padding: 10px;\n  color: white;\n  border: white 2px solid;\n  border-radius: 2px;\n  font-weight: bold;\n`;\n\nexport const StyledButton = styled.button`\n  color: ${props => props.selected ? CommonVariables.primaryFontColourDark : CommonVariables.primaryFontColour};\n  background: ${props => props.selected ? 'white' : CommonVariables.primaryButtonColour};\n  border: 1px solid ${props => props.selected ? CommonVariables.primaryFontColourDark : CommonVariables.primaryFontColour};\n  border-radius: 5px;\n  :hover {\n    color: ${CommonVariables.primaryFontColourDark};\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst StyledTableBody = styled.tbody`\n  text-align: right;\n`;\n\nconst StyledTable = styled.table`\n  width: 100%;\n  font-weight: lighter;\n`;\n\nexport const RenderBasicList = item => (\n  <span>\n    <li>Time: {item.dt_txt}</li>\n    <li>Temperature: {Math.round(item.main.temp - 273.15)}</li>\n    <li>Description: {item.weather[0].description}</li>\n    <li>Wind speed: {item.wind.speed}</li>\n  </span>\n);\n\nexport const RenderBasicTable = items => (\n  <StyledTable>\n    <thead>\n      <tr>\n        <th>Time</th>\n        <th>Temperature</th>\n        <th>Description</th>\n        <th>Wind speed</th>\n      </tr>\n    </thead>\n    <StyledTableBody>\n      {\n        items.map((item, i) => {\n          return RenderBasicCells(item, i);\n        })\n      }\n    </StyledTableBody>\n  </StyledTable>\n);\n\nexport const RenderBasicCells = (item, i) => (\n  <tr key={i}>\n    <td>{item.dt_txt}</td>\n    <td>{Math.round(item.main.temp - 273.15)}</td>\n    <td>{item.weather[0].description}</td>\n    <td>{item.wind.speed}</td>\n  </tr>\n);\n\n\nexport const RenderPrettyTable = items => (\n  <Paper>\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Time</TableCell>\n          <TableCell>Temperature</TableCell>\n          <TableCell>Description</TableCell>\n          <TableCell>Wind speed</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {items.map((item, i) => (\n          <TableRow key={i}>\n            <TableCell>{item.dt_txt}</TableCell>\n            <TableCell numeric>{Math.round(item.main.temp - 273.15)}</TableCell>\n            <TableCell numeric>{item.weather[0].description}</TableCell>\n            <TableCell numeric>{item.wind.speed}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </Paper>\n);\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { StyledButton } from '../Styles/CommonComponents';\nimport { fetchWeatherData, updatePrettyPreference } from '../Actions/WeatherActions';\nimport { RenderBasicList, RenderBasicTable, RenderPrettyTable } from '../Components/WeatherComponents';\n\nconst StyledWeatherContainer = styled.div`\n  margin: 5px;\n  text-align: center;\n`;\n\nconst StyledWeatherControls = styled.div`\n  text-align: center;\n  font-size: 24px;\n  margin-bottom: 10px;\n`;\n\nconst StyledLocation = styled.div`\n  font-weight: bold;\n  font-size: 22px;\n  margin-bottom: 5px;\n`\n\nclass Weather extends Component {\n  componentWillMount() {\n    this.props.fetchWeatherData();\n  }\n\n  componentWillReceiveProps() {\n    console.log('componentWillReceiveProps', this.props);\n  }\n\n  toggleDataCall = (params) => {\n\n  };\n\n  toggleRenderPretty = (isPretty) => {\n    this.props.updatePrettyPreference(isPretty);\n  }\n\n  generateWeatherDataList = (list) => {\n    if (this.props.search.isRenderPrettyTable) {\n      return list.map((item, i) => (\n        <p key={i}>\n          lolol\n          {RenderBasicList(item)}\n        </p>\n      ));\n    }\n    return list.map((item, i) => (\n      <p key={i}>\n        lolol\n        {RenderBasicList(item)}\n      </p>\n    ));\n  };\n\n  renderTable = (list) => {\n    if (this.props.search.isRenderPrettyTable) {\n      return RenderPrettyTable(list);\n    }\n    return RenderBasicTable(list);\n  }\n\n\n  render() {\n    const {\n      isLoading,\n      dataError,\n      weather,\n      search,\n    } = this.props;\n\n    if (isLoading) {\n      return <p>Loading...</p>;\n    }\n    if (dataError) {\n      return <p>Something went wrong, please refresh or try again</p>;\n    }\n\n    return (\n      <StyledWeatherContainer>\n        <StyledWeatherControls>\n          <p>\n            A weather app that renders data into a simple table.\n          </p>\n          Controls:&nbsp;\n          <StyledButton\n            displayId='simpleSwitch'\n            selected={!search.isRenderPrettyTable}\n            onClick={() => this.toggleRenderPretty(false)}\n          >\n            Simple\n          </StyledButton>\n          <StyledButton\n            displayId='prettySwitch'\n            selected={search.isRenderPrettyTable}\n            onClick={() => this.toggleRenderPretty(true)}\n          >\n            Pretty\n          </StyledButton>\n        </StyledWeatherControls>\n        {weather.list && (\n          <div>\n            <StyledLocation>\n              Location: {search.searchTerm}\n            </StyledLocation>\n            {this.renderTable(weather.list)}\n            <ul>\n              {/* {this.generateWeatherDataList(weather.list)} */}\n            </ul>\n          </div>\n        )}\n      </StyledWeatherContainer>\n    );\n  }\n}\n\nWeather.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n  dataError: PropTypes.string,\n  weather: PropTypes.object,\n  search: PropTypes.object,\n};\n\nconst mapStateToProps = state => ({\n  weather: state.weatherData.weather,\n  isLoading: state.weatherData.isLoading,\n  search: state.search,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchWeatherData: x => dispatch(fetchWeatherData(x)),\n  updatePrettyPreference: x => dispatch(updatePrettyPreference(x)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Weather);\n","import { openWeatherMapKey } from '../Config/config';\nimport Constants from './ActionTypes';\n\nexport const fetchWeatherData = params => (dispatch) => {\n  const url = 'http://api.openweathermap.org/data/2.5/forecast?q=London&mode=json';\n  dispatch({\n    type: Constants.LOADING_DATA,\n    isLoading: true,\n  });\n  return fetch(`${url}&APPID=${openWeatherMapKey}`)\n    .then(response => response.json())\n    .then((myJson) => {\n      dispatch({\n        type: Constants.UPDATE_DATA,\n        isLoading: false,\n        data: myJson,\n      });\n    });\n};\n\nexport const updatePrettyPreference = isPretty => ({\n  type: Constants.UPDATE_SEARCH_PRETTY,\n  isRenderPrettyTable: isPretty,\n});\n","// export const openWeatherMapKey = '83946d614291fa5661fdb9504bde2d8e';\nexport const openWeatherMapKey = 'a7584bd1222aab0562a28d8598854c00';","import React from 'react';\nimport styled from 'styled-components';\nimport DesignVariables from '../Styles/DesignVariables';\nimport { StyledLogo } from '../Styles/CommonComponents';\nimport Weather from '../Containers/Weather';\n\nconst StyledContainer = styled.div`\n  background: linear-gradient(${DesignVariables.primaryBgColourDark}, ${DesignVariables.primaryBgColourLight});\n  background-color: ${DesignVariables.primaryBgColourLight};\n  color: ${DesignVariables.primaryFontColour};\n`;\n\nconst StyledLogoContainer = styled(StyledLogo)`\n  margin: 10px;\n`;\n\nconst Home = () => (\n  <StyledContainer>\n    <StyledLogoContainer>\n      Weather Toggle App\n    </StyledLogoContainer>\n    <Weather />\n  </StyledContainer>\n);\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport RootReducer from './Reducers/Root.reducer';\nimport InitialState from './Reducers/InitialState';\nimport Home from './Views/Home';\n\n// Add redux devtools\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// Apply thunk\nconst enhancer = composeEnhancers(\n  applyMiddleware(thunk),\n);\n\n// Apply thunk middleware to store with Redux devtools\nconst store = createStore(\n  RootReducer,\n  InitialState,\n  enhancer,\n);\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Home />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}